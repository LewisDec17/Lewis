# All-in-One.yaml手搓规则
# 在线 https://github.com/LewisDec17/Lewis/blob/main/All-in-One-2025.ini    "Raw"后   https://raw.githubusercontent.com/LewisDec17/Lewis/refs/heads/main/All-in-One-2025.ini
# DNS泄露检测： https://qichiyu.blogspot.com/2024/07/openclash.html
# 更新日期：2025.04.20 Sunday
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。

 
# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr {type: select, proxies: [🚀 默认代理, 🔯 香港故转, 🔯 日本故转, 🔔 韩国自动, 🔔 香港自动, 🔔 日本自动, 🔔 美国自动, 🔔 狮城自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🌐 全部节点, 🧑🏽‍🚀 直连]}
pr-zy: &pr-zy {type: select, proxies: [🚀 默认代理, 📲 美TG节点, 💶 美PayPal节点, 🌐 全部节点, 🧑🏽‍🚀 直连]}

# 策略组 
# # 符号  🔔  🥎 ⛔ 🏆  🥇  🔥  🌕  🛎️  🍋  🍏  🌷  🦉  🛰️  🧑🏼‍✈️  🧑🏽‍🚀  🛶 ⚔️ 🧑🏼‍🚀  🙅  emoji大全  https://www.emojiall.com/zh-hans/categories/J
# 路标网址 https://icon-sets.iconify.design/    代码  , icon: ""
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔔 韩国自动, 🔔 香港自动, 🔔 日本自动, 🔔 美国自动, 🔔 狮城自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🌐 全部节点, 🧑🏽‍🚀 直连]}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🐬 OneDrive, <<: *pr}
  # - {name: 🐬 OneDrive, <<: *pr, icon: "www.123.png"}
  - {name: 💻 Microsoft, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr-zy}
  - {name: 💶 PayPal, <<: *pr-zy}
  # - {name: ☎️ Talkatone, <<: *pr-zy}
  
#  - {name: 📲 Telegram, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔔 香港自动, 🔔 日本自动, 🔔 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 📲 美tg节点, 🌐 全部节点, 🧑🏽‍🚀 直连]}
  - {name: 🎥 NETFLIX, <<: *pr}
  - {name: ✈️ Speedtest, <<: *pr}
  - {name: 🍎 Apple, type: select, proxies: [🧑🏽‍🚀 直连, 🚀 默认代理]}
  - {name: 🌍 国外媒体, <<: *pr}
  - {name: 🎞️ 国内媒体, <<: *pr}
  - {name: 🎯 直连, type: select, proxies: [🧑🏽‍🚀 直连, 🚀 默认代理]}
  - {name: 🛑 广告拦截, type: select, proxies: [⚔️⛔ 拒绝, 🧑🏽‍🚀 直连]}
  - {name: 🍃 应用净化, type: select, proxies: [⚔️⛔ 拒绝, 🧑🏽‍🚀 直连]}
  - {name: 🆎 AdBlock, type: select, proxies: [⚔️⛔ 拒绝, 🧑🏽‍🚀 直连]}
  - {name: 🛡️ 隐私防护, type: select, proxies: [⚔️⛔ 拒绝, 🧑🏽‍🚀 直连]}
  - {name: 🐟 漏网之鱼, <<: *pr}

#节点分类
  - {name: 📲 美TG节点, type: select, include-all: false, use: [Airport1], filter: "(?i)美国06"}
  - {name: 💶 美PayPal节点, type: select, include-all: false, use: [Airport1], filter: "(?i)美国07"}
  # - {name: ☎️ 美Talkatone节点, type: select, include-all: false, use: [Airport1], filter: "(?i)美国03"}
  
  - {name: 🇭🇰 香港节点, type: select, include-all: false, use: [Airport2], filter: "(?i)港|hk|hongkong|hong kong"}    # include-all: true  如果为 true 则 机场链接1和链接2都会展示，当为false时，配合, use: [Airport2]使用
  - {name: 🇯🇵 日本节点, type: select, include-all: false, use: [Airport2], filter: "(?i)日|jp|japan"}
  - {name: 🇺🇲 美国节点, type: select, include-all: false, use: [Airport2], filter: "(?i)美|us|unitedstates|united states"}
  
  - {name: 🔯 香港故转, type: fallback, include-all: false, use: [Airport2], tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🔯 日本故转, type: fallback, include-all: false, use: [Airport2], tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"}
  
  - {name: 🔔 韩国自动, type: url-test, include-all: false, use: [Airport2], tolerance: 20, interval: 300, filter: "(?=.*(KR|KOR|韩国|首尔|韩|韓|(?i)Korea))^((?!(台|日|港|新|深|美)).)*$"}
  - {name: 🔔 香港自动, type: url-test, include-all: false, use: [Airport2], tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🔔 日本自动, type: url-test, include-all: false, use: [Airport2], tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"}
  - {name: 🔔 美国自动, type: url-test, include-all: false, use: [Airport2], tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: 🔔 狮城自动, type: url-test, include-all: false, use: [Airport2], tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|(?i)Singapore))^((?!(港|台|日|韩|美)).)*$"}
  - {name: ♻️ 自动选择, type: url-test, include-all: false, use: [Airport2], tolerance: 20, interval: 300, filter: "^((?!(不要指定)).)*$"}
  
  - {name: 🌏 其它节点, type: select, include-all: false, use: [Airport2], filter: "^((?!(美|us|unitedstates|united states|香港|HK|Hong Kong|🇭🇰|HongKong|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan|新加坡|坡|狮城|SG|Singapore)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}
# 节点分类老的写法
  - name: X-SuperFlash全部节点
    type: url-test
    proxies:
      - 🧑🏽‍🚀 直连
    use: [Airport2]
    # use: [Airport1, Airport2]  # 同时出现2个机场节点
    filter: "^((?!(不要指定)).)*$"          # 只出现指定的节点 "(?i)美|us|unitedstates|united states"
    # disable-udp: false

  - name: 百宝箱全部节点
    type: url-test
    proxies:
      - 🧑🏽‍🚀 直连
    use:
      - Airport1
    filter: "^((?!(不要指定)).)*$"
    disable-udp: false

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - DOMAIN-SUFFIX,qichiyu.com,🚀 默认代理
  - DOMAIN-SUFFIX,githubusercontent.com,🔔 香港自动
  - SRC-IP-CIDR,192.168.10.19/32,🎯 直连


  # - RULE-SET,Talkatone_class,☎️ Talkatone
  - RULE-SET,GuangGaoLanJie_class,🛑 广告拦截
  - RULE-SET,YingYongJingHua_class,🍃 应用净化
  - RULE-SET,AdBlock_class,🆎 AdBlock
  - RULE-SET,YinSiFangHu_class,🛡️ 隐私防护

  - RULE-SET,zidingyiguizeji_domain,🚀 默认代理
  - RULE-SET,private_domain,🎯 直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,guoneimeiti,🎞️ 国内媒体
  - RULE-SET,guowaimeiti,🌍 国外媒体
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,💻 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers:
  zidingyiguizeji_domain: { <<: *class, url: "https://raw.githubusercontent.com/LewisDec17/Lewis/refs/heads/ziyong/zidingyiguizeji.list"}
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  private_domain: { <<: *class, url: "https://raw.githubusercontent.com/LewisDec17/Lewis/refs/heads/main/Direct.list"}
  private_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/LocalAreaNetwork.list"}
  private_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/UnBan.list"}
  private_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/GoogleCN.list"}
  private_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/SteamCN.list"}
  private_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list"}
  private_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaCompanyIp.list"}
  private_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Download.list"}
  private_domain: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China.list"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/master/ProxyLite.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/openai.mrs" }
  ai: { <<: *class, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/openai.list"}  
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs"}

  # Talkatone_class: { <<: *class, url: "https://raw.githubusercontent.com/LewisDec17/Lewis/refs/heads/ziyong/Talkatone.list"}  
  GuangGaoLanJie_class: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list"}
  YingYongJingHua_class: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanProgramAD.list"}
  AdBlock_class: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyList.list"}
  AdBlock_class: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyListChina.list"}
  YinSiFangHu_class: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyPrivacy.list"}
  
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/github1s.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  guoneimeiti: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMedia/ChinaMedia.list"}
  guowaimeiti: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyMedia.list"}
    
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}


#规则集链接  https://github.com/MetaCubeX/meta-rules-dat/tree/meta